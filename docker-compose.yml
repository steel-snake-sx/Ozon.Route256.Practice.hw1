version: "3.9"

services:
  
  customer-service:
    build:
      context: ./src/Ozon.Route256.Practice.CustomerService
      dockerfile: Dockerfile
    depends_on:
      - customer-service-db
    container_name: customer-service
    ports:
      - "5081:8080"
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: "http://+:8080"
  
  customer-service-db:
    image: postgres:latest
    container_name: customer-service-db
    environment:
      - POSTGRES_DB=customer-service
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=test
    ports:
      - "5400:5432"
    volumes:
      - customer-service-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test -d customer-service"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  orders-generator-web:
    build:
      context: ./src/Ozon.Route256.Practice.OrdersGenerator
      dockerfile: Dockerfile
    container_name: orders-generator-web
    depends_on:
      broker-1:
        condition: service_healthy
      broker-2:
        condition: service_healthy
    environment:
      - ROUTE256_ORDER_SOURCE=WebSite
      - ROUTE256_KAFKA_BROKERS=broker-1:9091,broker-2:9092
      - ROUTE256_ORDER_REQUEST_TOPIC=pre_orders

  orders-generator-mobile:
    build:
      context: ./src/Ozon.Route256.Practice.OrdersGenerator
      dockerfile: Dockerfile
    container_name: orders-generator-mobile
    depends_on:
      broker-1:
        condition: service_healthy
      broker-2:
        condition: service_healthy
    environment:
      - ROUTE256_ORDER_SOURCE=Mobile
      - ROUTE256_KAFKA_BROKERS=broker-1:9091,broker-2:9092
      - ROUTE256_ORDER_REQUEST_TOPIC=pre_orders

  orders-generator-api:
    build:
      context: ./src/Ozon.Route256.Practice.OrdersGenerator
      dockerfile: Dockerfile
    container_name: orders-generator-api
    depends_on:
      broker-1:
        condition: service_healthy
      broker-2:
        condition: service_healthy
    environment:
      - ROUTE256_ORDER_SOURCE=Api
      - ROUTE256_KAFKA_BROKERS=broker-1:9091,broker-2:9092
      - ROUTE256_ORDER_REQUEST_TOPIC=pre_orders

  service-discovery:
    build:
      context: ./src/Ozon.Route256.Practice.ServiceDiscovery
      dockerfile: Dockerfile
    container_name: service-discovery
    environment:
      - ROUTE256_DB_STATE=cluster:0-9:db1:1543;cluster:10-19:db2:1543;cluster1:0:db3:1543
      - ROUTE256_UPDATE_TIMEOUT=10
    ports:
      - "5500:8080"
  
  logistic-simulator:
    build:
      context: ./src/Ozon.Route256.Practice.LogisticsSimulator
      dockerfile: Dockerfile
    container_name: logistic-simulator

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: '1'
      ZOOKEEPER_CLIENT_PORT: '2181'
      ZOOKEEPER_TICK_TIME: '2000'
    healthcheck:
      test: ["CMD-SHELL", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  broker-1:
    image: confluentinc/cp-kafka:7.3.2
    container_name: broker-1
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29091:29091"
    environment:
      KAFKA_BROKER_ID: '1'
      KAFKA_BROKER_RACK: '1'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: 'LISTENER_INTERNAL://:9091,LISTENER_LOCAL://:29091'
      KAFKA_ADVERTISED_LISTENERS: 'LISTENER_INTERNAL://broker-1:9091,LISTENER_LOCAL://localhost:29091'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'LISTENER_INTERNAL'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'LISTENER_INTERNAL:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT'
      KAFKA_DEFAULT_REPLICATION_FACTOR: '2'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '2'
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server broker-1:9091 --list"]
      interval: 15s
      timeout: 10s
      retries: 10
  
  broker-2:
    image: confluentinc/cp-kafka:7.3.2
    container_name: broker-2
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: '2'
      KAFKA_BROKER_RACK: '2'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: 'LISTENER_INTERNAL://:9092,LISTENER_LOCAL://:29092'
      KAFKA_ADVERTISED_LISTENERS: 'LISTENER_INTERNAL://broker-2:9092,LISTENER_LOCAL://localhost:29092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'LISTENER_INTERNAL'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'LISTENER_INTERNAL:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT'
      KAFKA_DEFAULT_REPLICATION_FACTOR: '2'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '2'
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server broker-2:9092 --list"]
      interval: 15s
      timeout: 10s
      retries: 10

volumes:
  customer-service-db:
    name: customer-service-db